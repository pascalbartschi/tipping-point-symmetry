---
title: "Partial reproduction of Bush et al (2017) Oxic-anoxic regime shifts mediated by feedbacks between biogeochemical processes and microbial community dynamics"
author: "Owen Petchey, Rainer M Krug"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  rmarkdown::html_vignette:
    toc: yes
vignette: >
  %\VignetteIndexEntry{Reproducing some results of Bush et al 2017}
  %\VignetteEngine{knitr::rmarkdown}
  \usepackage[utf8]{inputenc}
---

```{r setup, output = FALSE, message = FALSE, echo = FALSE}
## should some of the more intense simulations be run...

options(mc.cores=8)

mdat <- function(name = "") {
  system.file(file.path("data_pkg", "partial_reproduction", name), package = "microxanox")
}

##########
### To generate the data_pkg, please uncomment the following three lines 
# and create the directory 
# 
# mdat <- function(name = "") {
#   file.path(".", "data_pkg", "partial_reproduction", name)
# }
# dir.create(mdat(), recursive = TRUE, showWarnings = FALSE)
##########



knitr::opts_chunk$set(
  echo = TRUE,
  cache = FALSE,
  fig.align = "centre",
  fig.width = 7,
  fig.height = 4
)


library(tidyverse)
library(deSolve)
library(rootSolve)
library(microxanox)
library(patchwork)

## Set random number generator seed
## Is redundant if there are no stochastic components in the model
set.seed(13)


```

# Introduction

The aims here are:

-   Reproduce the results of [Bush et al 2017](https://www.nature.com/articles/s41467-017-00912-x).

And in addition:

-   Show how temporal change in oxygen diffusivity causes temporal switches between oxic and anoxic states.
-   Show how differences in the functional groups composition alters the ecosystem response to variation in oxygen diffusivity.
-   Quantify the amount of hysteresis and nonlinearity in these responses.
-   Show how amount of hysteresis and nonlinearity in ecosystem response depends on functional group composition.

These additional results are only presented graphically below, and are not discussed. Some may be presented and discussed in an article associated with this package (*link to be added*).

Please see the *User Guide* vignette for further introduction and general methods.

*Please note that the plotting functions in the `microxanox` package are provided for convenience, and not for production of perfectly formatted print-ready graphs.*

## Code availability

Much of the code used to create the content of this vignette is not shown in the rendered (pdf or html) document. It is available in the [microxanox github repository](https://github.com/UZH-PEG/microxanox/blob/main/vignettes/partial-reproduction-Bushetal2017.Rmd)

# Methods

## Setup R

## Set defaults

```{r}
ma <- rep(1e2, 3)
names(ma) <- c("CB", "PB", "SB")
parameter <- new_runsim_parameter(
  dynamic_model = bushplus_dynamic_model,
  strain_parameter = new_strain_parameter(),
  ## no default_initial_state
  sim_duration = 2000,
  sim_sample_interval = 1,
  log10a_series = c(
    log10(new_strain_parameter()$a_O),
    log10(new_strain_parameter()$a_O)
  ),
  event_definition = event_definition_1,
  event_interval = 10,
  noise_sigma = 0,
  minimum_abundances = ma
)

rm(ma)

saveRDS(parameter, file = mdat("parameter_default.RDS"))
```

# Simulations

## Initial conditions favouring anoxic, no noise, no forcing

Reproduce dynamics when the initial conditions favour the anoxic state (Figure 2a, b in Bush et al. 2017)

```{r}
parameter$strain_parameter$initial_state  <-  new_initial_state(values = "bush_anoxic_fig2ab")
sim_res <- run_simulation(parameter)
saveRDS(sim_res, file = mdat("bush_anoxic_fig2ab.RDS"))

plot_dynamics(simulation_result = sim_res)
```

Population dynamics seem as in the paper, though resource dynamics may fluctuate more than in the paper.

## Initial conditions favouring oxic, no noise, no forcing

Reproduce dynamics when the initial conditions favour the oxic state (Figure 2c, d in Bush et al. 2017)

```{r}
parameter$strain_parameter$initial_state = new_initial_state(values = "bush_oxic_fig2cd")
sim_res <- run_simulation(parameter)
saveRDS(sim_res, file = mdat("bush_oxic_fig2cd.RDS"))

plot_dynamics(sim_res)
##ggsave("high_CB.png")
```

## Stable states

Here we find the stable states that correspond to specific values of oxygen diffusivity (parameter $a_0$ / `a_0`). (Code not displayed.)

```{r echo = FALSE, sim_ss_CB_SB_PB1, eval = !file.exists(mdat("ss_CB_SB_PB.RDS"))}

grid_num_a <- 100
a_Os <- 10^seq(-6, -2, length=grid_num_a)
grid_num_N <- 2
initial_CBs <- 10^seq(0, 10, length=grid_num_N)
initial_PBs <- 1e8
initial_SBs <- 1e8
ss_expt <- expand.grid(
  N_CB = initial_CBs,
  N_PB = initial_PBs,
  N_SB = initial_SBs,
  a_O = a_Os
)

ma <- rep(0, 3)
names(ma) <- c("CB", "PB", "SB")

parameter <- new_replication_ssfind_parameter(
  dynamic_model = bushplus_dynamic_model,
  strain_parameter = new_strain_parameter(
     n_CB = 1,
     n_PB = 1,
     n_SB = 1,
     values_initial_state = "bush_ssfig3"
  ),
  sim_duration = 50000,
  sim_sample_interval = 50000,
  event_definition = event_definition_1,
  event_interval = 50000,
  ss_expt = ss_expt,
  noise_sigma = 0,
  minimum_abundances = ma
)
rm(grid_num_a, a_Os, grid_num_N, initial_CBs, initial_PBs, initial_SBs, ma, ss_expt)
saveRDS(sim_res, file = mdat("parameter_ss_CB_SB_PB.RDS"))

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, file = mdat("ss_CB_SB_PB.RDS"))
rm(sim_res)
```

```{r echo = FALSE}
ss_CB_SB_PB <- readRDS(file = mdat("ss_CB_SB_PB.RDS"))
```


```{r echo = FALSE}
p1 <- ss_CB_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(
    a,
    direction,
    starts_with("CB"),
    starts_with("PB"),
    starts_with("SB")
  )  %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(
    aes(
        x = a,
        y = log10(Quantity+1),
        col = Species,
        linetype = direction
    ),
    size = 0.8
  ) +
    ylab(expression(Log[10](Abundance+1))) +
    xlab(expression(Log[10](Oxygen~diffusivity))) +
    ylim(0,10) +
  #theme(plot.title=element_text(size=10, hjust=0.5)) +
  labs(title="Organisms")
##ggsave("figures/CB_SB_PB.png", width = 3, height = 2)

p2 <- ss_CB_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down"))%>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction)) +
  labs(title="Substrates")


p1 / p2

```

## Temporal state switching

### Anoxic-oxic-anoxic

Temporal change in oxygen diffusivity is used to switch the system from anoxic to oxic and back to anoxic.

```{r sim_lhl_with_defaults, eval = !file.exists(mdat("lhl_with_defaults.RDS"))}

## low-high-low oxgygen diffusivity
lhl_log10a_series <- c(-8, -8, -2, -2, -2, -2, -2, -8, -8)

ma <- rep(1e2, 3)
names(ma) <- c("CB", "PB", "SB")

parameter <- new_runsim_parameter(
  dynamic_model = bushplus_dynamic_model,
  strain_parameter = new_strain_parameter(values_initial_state ="bush_anoxic_fig2ab"),
#   initial_state = new_initial_state(values = "bush_anoxic_fig2ab"),
#   strain_parameter = new_strain_parameter(),
  ## no default_initial_state
  sim_duration = 5000,
  sim_sample_interval = 10,
  log10a_series = lhl_log10a_series,
  event_definition = event_definition_1,
  event_interval = 100,
  noise_sigma = 0,
  minimum_abundances = ma
)

rm(ma, lhl_log10a_series)

## run simulation

sim_res <- run_simulation(parameter)
saveRDS(sim_res, mdat("lhl_with_defaults.RDS"))
rm(sim_res)
```


```{r echo = FALSE}
lhl_with_defaults <- readRDS(mdat("lhl_with_defaults.RDS"))
```


```{r}
plot_dynamics(lhl_with_defaults)
```

```{r eval = FALSE, echo = FALSE}
lhl_with_defaults$result %>%
  dplyr::filter(between(time, 1000, 73000)) %>%
  ggplot() +
  geom_path(aes(x=a, y=log10(O)),
            arrow = arrow(type = "open", angle = 30, length = unit(0.1, "inches")))
```

### Oxic-anoxic-oxic

Temporal change in oxygen diffusivity is used to switch the system from oxic to anoxic and back to oxic.



```{r sim_hlh_with_defaults, eval = !file.exists(mdat("hlh_with_defaults.RDS"))}
hlh_log10a_series <- c(-2, -2, -10, -14, -18, -22, -2, -2, -2)

ma <- rep(1e2, 3)
names(ma) <- c("CB", "PB", "SB")

parameter <- new_runsim_parameter(
  dynamic_model = bushplus_dynamic_model,
  strain_parameter = new_strain_parameter(values_initial_state = "bush_oxic_fig2cd"),
#  initial_state = new_initial_state(values = "bush_oxic_fig2cd"),
#   strain_parameter = new_strain_parameter(),
  ## no default_initial_state
  sim_duration = 50000,
  sim_sample_interval = 10,
  log10a_series = hlh_log10a_series,
  event_definition = event_definition_1,
  event_interval = 100,
  noise_sigma = 0,
  minimum_abundances = ma
)

rm(ma, hlh_log10a_series)


simulation_duration <- 50000

## low-high-low oxgygen diffusivity

## run simulation
sim_res <- run_simulation(parameter)
saveRDS(sim_res, mdat("hlh_with_defaults.RDS"))
rm(sim_res)
```


```{r echo = FALSE}
hlh_with_defaults <- readRDS(mdat("hlh_with_defaults.RDS"))
```


```{r}
plot_dynamics(hlh_with_defaults)
```

```{r eval = FALSE, echo = FALSE}
hlh_with_defaults$result %>%
  dplyr::filter(between(time, 1000, 100000)) %>%
  ggplot() +
  geom_path(aes(x=a, y=log10(O)),
            arrow = arrow(type = "open", angle = 30, length = unit(0.1, "inches")))
```

## Functional group composition and nature of response

In this section we get the stable states corresponding to specific values of oxygen diffusivity (parameter $a_0$ / `a_0`), for each combination of presence/absence of the functional groups.

Here we set the conditions common to all simulations:

```{r}
ma <- rep(0, 3)
names(ma) <- c("CB", "PB", "SB")

parameter <- new_replication_ssfind_parameter(
  dynamic_model = bushplus_dynamic_model,
  strain_parameter = new_strain_parameter(
    n_CB = 1,
    n_PB = 1,
    n_SB = 1,
    values_initial_state = "bush_ssfig3"
  ),
  sim_duration = 50000,
  sim_sample_interval = 50000,
  event_definition = event_definition_1,
  event_interval = 50000,
  ss_expt = NA,
  noise_sigma = 0,
  minimum_abundances = ma
)

rm(ma)
```


### No organisms

```{r echo = FALSE, sim_ss_no_biology, eval = !file.exists(mdat("ss_no_biology.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 0
initial_PBs <- 0
initial_SBs <- 0
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_no_biology.RDS"))
rm(sim_res)
```

```{r echo = FALSE}
ss_no_biology <- readRDS(mdat("ss_no_biology.RDS"))
```

```{r echo = FALSE}
ss_no_biology$result %>%
  select(a,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 2:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species))
```

```{r echo = FALSE}
ss_no_biology$result %>%
  select(a, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 2:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species))
```

### CB

```{r echo = FALSE, sim_ss_only_CB, eval = !file.exists(mdat("ss_only_CB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 10^seq(0, 10, length=grid_num_N)
initial_PBs <- 0
initial_SBs <- 0
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_CB.RDS"))
rm(sim_res)
```


```{r echo = FALSE}
ss_only_CB <- readRDS(mdat("ss_only_CB.RDS"))
```

```{r echo = FALSE}
tempx1 <- ss_only_CB$result %>%
  select(a,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 2:ncol(.))

tempx1 %>%
  ggplot(aes(x = a, y = log10(Quantity +1), col = Species)) +
  geom_path(size=0.8) +
  ylab(expression(Log[10](Abundance+1))) +
  xlab(expression(Log[10](Oxygen~diffusivity))) +
  #theme_light() +
  ylim(0,10) +
  #geom_path(data = filter(tempx1, Species == "PB"),
  #          aes(y=0.2), size = 0.8) +
  theme(plot.title=element_text(size=10, hjust=0.5)) +
  labs(title="Only CB")

##ggsave("figures/CB.png", width = 3, height = 2)
```

```{r echo = FALSE}
ss_only_CB$result %>%
  select(a, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 2:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species))
```

### SB

```{r echo = FALSE, sim_ss_only_SB, eval = !file.exists(mdat("ss_only_SB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 0  # this one is varied
initial_PBs <- 0
initial_SBs <- 10^seq(0, 8, length=grid_num_N)
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_SB.RDS"))
rm(sim_res)
```



```{r echo = FALSE}
ss_only_SB <- readRDS(mdat("ss_only_SB.RDS"))
```

```{r echo = FALSE}
ss_only_SB$result %>%
  mutate(direction = ifelse(initial_N_SB == 1, "down", "up")) %>%
  select(a, direction,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

```{r echo = FALSE}
ss_only_SB$result %>%
  mutate(direction = ifelse(initial_N_SB == 1, "down", "up"))%>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

### PB

```{r echo = FALSE, sim_ss_only_PB, eval = !file.exists(mdat("ss_only_PB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 0  # this one is varied
initial_PBs <- 10^seq(0, 8, length=grid_num_N)
initial_SBs <- 0
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_PB.RDS"))
rm(sim_res)
```



```{r echo = FALSE}
ss_only_PB <- readRDS(mdat("ss_only_PB.RDS"))
```

```{r echo = FALSE}
tempx1 <- ss_only_PB$result %>%
  select(a,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 2:ncol(.))
tempx1 %>%
  ggplot(aes(x = a, y = log10(Quantity+1), col = Species)) +
  geom_path(size = 0.8) +
  #theme_light() +
  ylim(0,10) +
  ylab(expression(Log[10](Abundance))) +
  xlab(expression(Log[10](Oxygen~diffusivity))) +
  #geom_path(data = filter(tempx1, Species == "CB"),
  #          aes(y=0.2), size = 0.8)+
  #geom_path(data = filter(tempx1, Species == "PB"),
  #          size = 0.8) +
  theme(plot.title=element_text(size=10, hjust=0.5)) +
  labs(title="Only PB")

##ggsave("figures/PB.png", width = 3, height = 2)

```

```{r echo = FALSE}
ss_only_PB$result %>%
  select(a, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 2:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species))
```

### SB and PB

```{r echo = FALSE, sim_ss_only_SB_PB, eval = !file.exists(mdat("ss_only_SB_PB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 0  # this one is varied
initial_PBs <- 10^seq(0, 8, length=grid_num_N)
initial_SBs <- 0
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
expt$N_SB <- expt$N_PB
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_SB_PB.RDS"))
rm(sim_res)
```



```{r echo = FALSE}
ss_only_SB_PB <- readRDS(mdat("ss_only_SB_PB.RDS"))
```

```{r echo = FALSE}
ss_only_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_SB == 1, "down", "up")) %>%
  select(a, direction,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

```{r echo = FALSE}
ss_only_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_SB == 1, "down", "up")) %>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

### SB and CB

```{r echo = FALSE, sim_ss_only_SB_CB, eval = !file.exists(mdat("ss_only_SB_CB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 10^seq(0, 10, length=grid_num_N)
initial_PBs <- 0
initial_SBs <- 10^8
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
# expt$N_SB <- expt$N_CB
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_SB_CB.RDS"))
rm(sim_res)
```


```{r echo = FALSE}
ss_only_SB_CB <- readRDS(mdat("ss_only_SB_CB.RDS"))
```

```{r echo = FALSE}
ss_only_SB_CB$result  %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

```{r echo = FALSE}
ss_only_SB_CB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:6) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

### CB and PB

```{r echo = FALSE, sim_ss_only_CB_PB, eval = !file.exists(mdat("ss_only_CB_PB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 10^seq(0, 10, length=grid_num_N)  # this one is varied
initial_PBs <- 10^8
initial_SBs <- 0
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
expt$N_CB <- expt$N_PB
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_only_CB_PB.RDS"))
rm(sim_res)
```


```{r  echo = FALSE, }
ss_only_CB_PB <- readRDS(mdat("ss_only_CB_PB.RDS"))
```

```{r echo = FALSE}
ss_only_CB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

```{r echo = FALSE}
ss_only_CB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

### CB, SB, and PB

```{r echo = FALSE, sim_ss_CB_SB_PB, eval = !file.exists(mdat("ss_CB_SB_PB.RDS"))}
grid_num_a <- 100
grid_num_N <- 2

initial_CBs <- 10^seq(0, 10, length=grid_num_N)
initial_PBs <- 1e8
initial_SBs <- 1e8
a_Os <- 10^seq(-6, -2, length=grid_num_a)
expt <- expand.grid(N_CB = initial_CBs,
                    N_PB = initial_PBs,
                    N_SB = initial_SBs,
                    a_O = a_Os)
parameter$ss_expt <- expt
rm(grid_num_a, grid_num_N, initial_CBs, initial_PBs, initial_SBs, a_Os, expt)

sim_res <- run_replication_ssfind(parameter)
saveRDS(sim_res, mdat("ss_CB_SB_PB.RDS"))
rm(sim_res)
```


```{r echo = FALSE}
ss_CB_SB_PB <- readRDS(mdat("ss_CB_SB_PB.RDS"))
```

```{r echo = FALSE}
ss_CB_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction,
         starts_with("CB"),
         starts_with("PB"),
         starts_with("SB")) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))

# ss_CB_SB_PB %>%
#   select(a, CB=N_CB, SB=N_SB, PB=N_PB) %>%
#   gather(key = Species, value=Quantity, 2:ncol(.)) %>%
#   ggplot() +
#   geom_path(aes(x = a, y = log10(Quantity), col = Species),
#             size=0.8) +
#   ylab(expression(Log[10](Abundance))) +
#   xlab(expression(Log[10](Oxygen~diffusivity))) +
#   theme_light() +
#   ylim(0,10) +
#   theme(plot.title=element_text(size=10, hjust=0.5)) +
#   labs(title="CB, SB, & PB")
##ggsave("figures/CB_SB_PB.png", width = 3, height = 2)

```

```{r echo = FALSE}
ss_CB_SB_PB$result %>%
  mutate(direction = ifelse(initial_N_CB == 1, "up", "down")) %>%
  select(a, direction, SO, SR, O, P) %>%
  gather(key = Species, value=Quantity, 3:ncol(.)) %>%
  ggplot() +
  geom_path(aes(x = a, y = log10(Quantity+1), col = Species, linetype = direction))
```

## Stability measures

Note that here, "stability measures" quantify characteristics of the state-environment relationship (i.e. nonlinearity and hysteresis). The measures of non-linearity and hysteresis were used in [Garnier et al (2020)](https://onlinelibrary.wiley.com/doi/abs/10.1002/ece3.6294)

Not much code is shown because all is rather standard data wrangling. The unique work is done by the `get_stability_measures` function, which is demonstrated in the User Guide vignette.


```{r echo = FALSE, sim_resp_summary, eval = !file.exists(mdat("resp_summary.RDS"))}
all_ss <- tibble(readRDS(mdat("ss_no_biology.RDS"))$result,
                 composition = "No organisms") %>%
  bind_rows(tibble(readRDS(mdat("ss_only_CB.RDS"))$result,
                   composition = "CB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_only_SB.RDS"))$result,
                   composition = "SB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_only_PB.RDS"))$result,
                   composition = "PB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_only_SB_PB.RDS"))$result,
                   composition = "SB-PB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_only_SB_CB.RDS"))$result,
                   composition = "SB-CB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_only_CB_PB.RDS"))$result,
                   composition = "CB-PB")) %>%
  bind_rows(tibble(readRDS(mdat("ss_CB_SB_PB.RDS"))$result,
                   composition = "CB-SB-PB"))

#ss_object <- all_ss %>%
#  filter(composition == "No organisms")

stab_res <- all_ss %>%
  group_by(composition) %>%
  do(stab_measures = get_stability_measures_replication_ssfind_result(.)) %>%
  unnest(cols = c(stab_measures)) %>%
  mutate(composition = as.factor(composition),
         composition = fct_relevel(composition,
                                   "No organisms",
                                   "CB",
                                   "SB",
                                   "PB",
                                   "CB-PB",
                                   "SB-CB",
                                   "SB-PB",
                                   "CB-SB-PB"),
         num_func_groups = case_when(composition =="No organisms" ~ 0,
                                     composition == "CB" ~ 1,
                                     composition == "SB" ~ 1,
                                     composition == "PB" ~ 1,
                                     composition == "CB-PB" ~ 2,
                                     composition == "SB-CB" ~ 2,
                                     composition == "SB-PB" ~ 2,
                                     composition == "CB-SB-PB" ~ 3
         ),
         var_type = ifelse(str_sub(Species, 3, 3)=="_", "Organism", "Substrate")) %>%
  gather(key = "stab_measure", value = "value", 3:14)
saveRDS(stab_res, mdat("stab_res.RDS"))
```

```{r echo = FALSE, fig.height=8}
stab_res <- readRDS(mdat("stab_res.RDS"))
stab_res %>%
  ggplot() +
  geom_point(aes(x = composition, y = value)) +
  facet_grid(Species ~ stab_measure, scales = "free") +
  coord_flip()

```

### Nonlinearity

This is the amount of non-linearity in the (steady) state-environment relationship. Here, the environment is oxygen diffusivity $a_0$ / `a_0`.

#### Organism nonlinearity

```{r echo = FALSE}
resp_summ1 <- stab_res %>%
  dplyr::filter(stab_measure %in% c("nl_down_log", "nl_up_log")) %>%
  group_by(composition, Species, num_func_groups, var_type) %>%
  summarise(ave_nl = mean(value))

resp_summ1 %>%
  ggplot() +
  geom_point(aes(composition, ave_nl)) +
  facet_wrap( ~ Species)+
  coord_flip()

```

#### Substrate nonlinearity

```{r echo = FALSE}
focus_on <- "Substrate"
ave_nl_substrate <- resp_summ1 %>%
  dplyr::filter(var_type == focus_on) %>%
  group_by(composition) %>%
  summarise(ave_ave_nl = mean(ave_nl))
ave_nl_substrate %>%
  ggplot() +
  geom_point(aes(composition, ave_ave_nl)) +
  ggtitle(paste("Nonlinearity in", focus_on, "response."))+
  coord_flip()
```

#### Average organism nonlinearity

```{r echo = FALSE}
focus_on <- "Organism"
ave_nl_organism <- resp_summ1 %>%
  dplyr::filter(var_type == focus_on) %>%
  group_by(composition) %>%
  summarise(ave_ave_nl = mean(ave_nl, na.rm = TRUE))
ave_nl_organism %>%
  ggplot() +
  geom_point(aes(composition, ave_ave_nl)) +
  ggtitle(paste("Nonlinearity in", focus_on, "response."))+
  coord_flip()
```

#### System nonlinearity

```{r echo = FALSE}
focus_on <- "System"
ave_nl_system <- resp_summ1 %>%
  group_by(composition) %>%
  summarise(ave_ave_nl = mean(ave_nl, na.rm = TRUE))
ave_nl_system %>%
  ggplot() +
  geom_point(aes(composition, ave_ave_nl)) +
  ggtitle(paste("Nonlinearity in", focus_on, "response."))+
  coord_flip()
##ggsave("figures/system_nonlinearity.png", width = 3, height = 2)

```

### Hysteresis

#### Substrate hysteresis

```{r echo = FALSE}
focus_on <- "Substrate"
resp_summ3 <- stab_res %>%
  dplyr::filter(stab_measure %in% c("hyst_tot_log", "hyst_range_log"),
                var_type == focus_on) %>%
  group_by(composition, num_func_groups, stab_measure, var_type) %>%
  summarise(ave_hyst = mean(value, na.rm = TRUE))

resp_summ3 %>%
  ggplot() +
  geom_point(aes(x = composition, y = ave_hyst)) +
  facet_wrap( ~ stab_measure, scales="free") +
  ggtitle(paste("Hysteresis in", focus_on, "response."))+
  coord_flip()

```

#### Organism hysteresis

```{r echo = FALSE}
focus_on <- "Organism"
resp_summ3 <- stab_res %>%
  dplyr::filter(stab_measure %in% c("hyst_tot_log", "hyst_range_log"),
                var_type == focus_on) %>%
  group_by(composition, num_func_groups, stab_measure, var_type) %>%
  summarise(ave_hyst = mean(value, na.rm = TRUE))

resp_summ3 %>%
  ggplot() +
  geom_point(aes(x = composition, y = ave_hyst)) +
  facet_wrap( ~ stab_measure, scales="free") +
  ggtitle(paste("Hysteresis in", focus_on, "response."))+
  coord_flip()

```

#### System hysteresis (separate)

```{r echo = FALSE}
resp_summ4 <- stab_res %>%
  dplyr::filter(stab_measure %in% c("hyst_tot_log", "hyst_range_log")) %>%
  group_by(stab_measure, composition) %>%
  summarise(mean_hyst = mean(value, na.rm = TRUE))

resp_summ4 %>%
  ggplot() +
  geom_point(aes(x = composition, y = mean_hyst)) +
  facet_wrap( ~ stab_measure) +
  ggtitle("Hysteresis in system response.")+
  coord_flip()

```

#### System hysteresis (combined)

```{r echo = FALSE}
resp_summ5 <- resp_summ4 %>%
  group_by(composition) %>%
  summarise(mean_mean_hyst = mean(mean_hyst))

resp_summ5 %>%
  ggplot() +
  geom_point(aes(x = composition, y = mean_mean_hyst)) +
  xlab("Functional groups present") +
  ylab("Amount of hysteresis") +
  #ylim(0,2) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  coord_flip()
##ggsave("figures/composition_system_hysteresis.png", width = 2.5, height = 2.5)

```
